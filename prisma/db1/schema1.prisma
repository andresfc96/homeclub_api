generator client {
  provider      = "prisma-client-js"
  output        = "../../node_modules/.prisma/client1"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL_DB1")
}

enum apartmentType {
  Corporate
  Tourist
}

enum bookingStatus {
  Active
  Cancelled
}

enum paymentConcept {
  Rent
  Service_fee
  Booking_fee
}

model apartment {
  id             Int             @id @default(autoincrement())
  name           String
  address        String
  type           apartmentType
  city           String
  country        String
  latitude       Float
  longitude      Float
  isActive       Boolean         @default(true)
  corporateRates corporateRate[]
  touristRates   touristRate[]
  bookings       booking[]

  @@index([type])
  @@index([city])
  @@index([country])
}

model corporateRate {
  id          Int       @id @default(autoincrement())
  apartment   apartment @relation(fields: [apartmentId], references: [id])
  apartmentId Int
  startDate   DateTime
  endDate     DateTime
  monthlyRate Float
  bookings    booking[]

  @@index([apartmentId])
}

model touristRate {
  id          Int       @id @default(autoincrement())
  apartment   apartment @relation(fields: [apartmentId], references: [id])
  apartmentId Int
  startDate   DateTime
  endDate     DateTime
  dailyRate   Float
  bookings    booking[]

  @@index([apartmentId])
}

model client {
  id        Int       @id @default(autoincrement())
  firstName String
  lastName  String
  email     String    @unique
  bookings  booking[]

  @@index([email])
}

model booking {
  id              Int            @id @default(autoincrement())
  code            String         @unique
  apartment       apartment      @relation(fields: [apartmentId], references: [id])
  apartmentId     Int
  client          client         @relation(fields: [clientId], references: [id])
  clientId        Int
  startDate       DateTime
  endDate         DateTime
  status          bookingStatus  @default(Active)
  payments        payment[]
  corporateRate   corporateRate? @relation(fields: [corporateRateId], references: [id])
  corporateRateId Int?
  touristRate     touristRate?   @relation(fields: [touristRateId], references: [id])
  touristRateId   Int?

  @@index([apartmentId])
  @@index([clientId])
  @@index([code])
  @@index([status])
}

model payment {
  id        Int            @id @default(autoincrement())
  booking   booking        @relation(fields: [bookingId], references: [id])
  bookingId Int
  concept   paymentConcept
  amount    Float
  createdAt DateTime       @default(now())

  @@index([bookingId])
}
